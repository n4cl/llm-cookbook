from typing import Dict
from util import llm_call

# dummy extract_xml function
def extract_xml(text: str, tag: str) -> str:
    """
    XMLタグから内容を抽出する関数の仮実装。
    実際の実装ではなく、テスト用にダミー文字列を返します。

    Args:
        text: 解析するテキスト
        tag: 抽出するXMLタグ

    Returns:
        タグに応じたダミーテキスト
    """
    # テスト用のダミーレスポンス
    dummy_responses = {
        'reasoning': 'これは問い合わせ内容に基づいた分析結果です。キーワードとユーザーの意図から判断しました。',
        'selection': '請求' if 'カード' in text or '請求' in text else
                     'アカウント' if 'アクセス' in text or 'パスワード' in text else
                     '技術' if 'エクスポート' in text or 'データ' in text else
                     '製品'
    }

    # 対応するダミーテキストを返す
    return dummy_responses.get(tag, f'ダミーテキスト: {tag}タグの内容')

def route(input: str, routes: Dict[str, str]) -> str:
    """
    Routing パターン
    コンテンツ分類を使用して入力を適切な専門プロンプトにルーティングする関数。

    Args:
        input: ルーティングする入力テキスト
        routes: ルートキーとそれに対応する専門プロンプトの辞書

    Returns:
        選択されたルートで処理された結果
    """
    # LLMを使用して適切なルートを決定する
    print(f"\n利用可能なルート: {list(routes.keys())}")
    selector_prompt = f"""
    入力を分析し、以下のオプションから最も適切なサポートチームを選択してください: {list(routes.keys())}
    まず推論を説明し、その後、選択結果を次のXML形式で提供してください:

    <reasoning>
    このチケットが特定のチームにルーティングされるべき理由の簡単な説明。
    キーワード、ユーザーの意図、緊急度を考慮してください。
    </reasoning>

    <selection>
    選択したチーム名
    </selection>

    入力: {input}""".strip()

    route_response = llm_call(selector_prompt)
    reasoning = extract_xml(route_response, 'reasoning')
    route_key = extract_xml(route_response, 'selection').strip().lower()

    print("ルーティング分析:")
    print(reasoning)
    print(f"\n選択されたルート: {route_key}")

    # 選択された専門プロンプトで入力を処理
    selected_prompt = routes[route_key]
    return llm_call(f"{selected_prompt}\n入力: {input}")

def main():
    """メイン実行関数"""
    # サポートチケットを適切なチームにルーティングする例
    support_routes = {
        "請求": """あなたは請求サポートの専門家です。以下のガイドラインに従ってください:
        1. 必ず「請求サポート回答:」で始めてください
        2. まず、具体的な請求の問題を確認してください
        3. 料金や相違点を明確に説明してください
        4. 具体的な次のステップをタイムラインと共に示してください
        5. 関連する場合は、支払いオプションで締めくくってください

        回答はプロフェッショナルかつフレンドリーに保ってください。

        入力: """,

        "技術": """あなたは技術サポートエンジニアです。以下のガイドラインに従ってください:
        1. 必ず「技術サポート回答:」で始めてください
        2. 問題を解決するための正確な手順をリストアップしてください
        3. 関連する場合はシステム要件を含めてください
        4. 一般的な問題に対する回避策を提供してください
        5. 必要に応じてエスカレーションパスで締めくくってください

        明確な番号付きステップと技術的な詳細を使用してください。

        入力: """,

        "アカウント": """あなたはアカウントセキュリティの専門家です。以下のガイドラインに従ってください:
        1. 必ず「アカウントサポート回答:」で始めてください
        2. アカウントのセキュリティと検証を優先してください
        3. アカウント回復/変更のための明確な手順を提供してください
        4. セキュリティに関するヒントと警告を含めてください
        5. 解決時間に対する明確な期待を設定してください

        真剣でセキュリティを重視したトーンを維持してください。

        入力: """,

        "製品": """あなたは製品の専門家です。以下のガイドラインに従ってください:
        1. 必ず「製品サポート回答:」で始めてください
        2. 機能の教育とベストプラクティスに焦点を当ててください
        3. 使用例の具体的な例を含めてください
        4. 関連するドキュメントセクションへのリンクを記載してください
        5. 役立つ可能性のある関連機能を提案してください

        教育的で励みになるトーンを心がけてください。

        入力: """
    }

    # テスト用のサポートチケット
    tickets = [
        """件名: アカウントにアクセスできません
        メッセージ: こんにちは、1時間ほど前からログインしようとしていますが、「無効なパスワード」エラーが表示されます。
        正しいパスワードを使用していると確信しています。アクセスを回復するのを手伝ってもらえますか？
        今日中にレポートを提出する必要があるため、これは緊急です。
        - 田中""",

        """件名: カードに予期しない請求がありました
        メッセージ: こんにちは、カードに貴社からの4,999円の請求があることに気づきましたが、
        私は2,999円のプランを使用していると思っていました。この請求について説明していただき、
        もし間違いがあれば調整していただけますか？
        よろしくお願いします。
        佐藤""",

        """件名: データをエクスポートする方法は？
        メッセージ: プロジェクトデータをすべてExcelにエクスポートする必要があります。
        ドキュメントを見ましたが、一括エクスポートの方法がわかりません。これは可能ですか？
        もしそうなら、手順を教えていただけますか？
        よろしくお願いします。
        鈴木"""
    ]

    print("サポートチケットを処理中...\n")
    for i, ticket in enumerate(tickets, 1):
        print(f"\nチケット {i}:")
        print("-" * 40)
        print(ticket)
        print("\n回答:")
        print("-" * 40)
        response = route(ticket, support_routes)
        print(response)

if __name__ == "__main__":
    main()
